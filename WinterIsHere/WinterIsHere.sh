#! /bin/bash
#Seasonal-Month based password guesser.
#By Zach Warren
#7/20/2014
#Utilize "gpresult /v" and "net accounts /domain" to gain insight into the domain's password policy.
#Length, Complexity, Age, Threshold, and Observation Window should all be noted.
#https://pen-testing.sans.org/blog/2012/11/26/this-is-the-winter2012-of-our-discontent-guessing-bad-rotating-passwords

if [[ $# -eq 0 ]] ; then
  echo "==============================="
  echo "Seasonal-Month Password Guesser"
  echo "==============================="
  echo -n "This script generates a month and season derived password list based"
  echo -e " on the user's last reset date.\n"
  echo "Submit a csv file with two columns: username,pwdlastset."
  echo -e "Column titles are not required."
  exit 0
fi

#Seasons ('Merica)
#Change to array in future.
s1="Spring"
s2="Summer"
s3="Fall"
s4="Winter"

#Months
#Change to array in future.
m1="Jan"
m2="Feb"
m3="Mar"
m4="Apr"
m5="May"
m6="June"
m7="July"
m8="Aug"
m9="Sep"
m10="Oct"
m11="Nov"
m12="Dec"

#Future command-line args (these will be defaults)
#MINLEN = minimum-length (pad end chars?)
OUTPUT="weakpassword_guesses.lst"
SEP=","
END="!"

echo "username,password" > $OUTPUT

#Add additional exceptions in future.
#Could be cleaner... 
for z in $(cat $1)
do
  
  RAW=$z
  USER=$(echo $RAW | awk -F, '{print $1}')
  MON=$(echo $RAW | awk -F, '{print $2}' | awk -F'/' '{print $1}')
  YEAR=$(echo $RAW | awk -F, '{print $2}' | awk -F'/' '{print $3}')

  if [[ $MON = 1 ]];then
    echo $USER$SEP$m1$YEAR$END >> $OUTPUT
    echo $USER$SEP$s4$YEAR >> $OUTPUT
  elif [[ $MON = 2 ]];then
    echo $USER$SEP$m2$YEAR$END >> $OUTPUT
    echo $USER$SEP$s4$YEAR >> $OUTPUT
  elif [[ $MON = 3 ]];then
    echo $USER$SEP$m3$YEAR$END >> $OUTPUT
    echo $USER$SEP$s1$YEAR >> $OUTPUT
  elif [[ $MON = 4 ]];then
    echo $USER$SEP$m4$YEAR$END >> $OUTPUT
    echo $USER$SEP$s1$YEAR >> $OUTPUT
  elif [[ $MON = 5 ]];then
    echo $USER$SEP$m5$YEAR$END >> $OUTPUT
    echo $USER$SEP$s1$YEAR >> $OUTPUT
  elif [[ $MON = 6 ]];then
    echo $USER$SEP$m6$YEAR$END >> $OUTPUT
    echo $USER$SEP$s2$YEAR >> $OUTPUT
  elif [[ $MON = 7 ]];then
    echo $USER$SEP$m7$YEAR$END >> $OUTPUT
    echo $USER$SEP$s2$YEAR >> $OUTPUT
  elif [[ $MON = 8 ]];then
    echo $USER$SEP$m8$YEAR$END >> $OUTPUT
    echo $USER$SEP$s2$YEAR >> $OUTPUT
  elif [[ $MON = 9 ]];then
    echo $USER$SEP$m9$YEAR$END >> $OUTPUT
    echo $USER$SEP$s3$YEAR >> $OUTPUT
  elif [[ $MON = 10 ]];then
    echo $USER$SEP$m10$YEAR$END >> $OUTPUT
    echo $USER$SEP$s3$YEAR >> $OUTPUT
  elif [[ $MON = 11 ]];then
    echo $USER$SEP$m11$YEAR$END >> $OUTPUT
    echo $USER$SEP$s3$YEAR >> $OUTPUT
  elif [[ $MON = 12 ]];then
    echo $USER$SEP$m12$YEAR$END >> $OUTPUT
    echo $USER$SEP$s4$YEAR >> $OUTPUT
  shopt -s nocasematch
  elif [[ $MON =~ (pwdlastset|date|user|reset|username) ]];then
    echo "You don't have to include column headers."
    echo "No worries I'll ignore them."
  else
    echo $USER " Error: Unexpected Value"
  fi
done

echo "File created here: " $OUTPUT
